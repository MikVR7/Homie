import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:homie_app/providers/file_organizer_provider.dart';
import 'package:homie_app/providers/accessibility_provider.dart';
import 'package:homie_app/widgets/accessibility/accessible_icon_button.dart';
import 'package:homie_app/widgets/accessibility/screen_reader_announcer.dart';

class AIOperationsPreview extends StatefulWidget {
  final List<FileOperation> operations;
  final Function(List<FileOperation>)? onOperationsModified;
  final Function()? onExecute;
  final bool showBatchControls;
  final bool allowModification;

  const AIOperationsPreview({
    Key? key,
    required this.operations,
    this.onOperationsModified,
    this.onExecute,
    this.showBatchControls = true,
    this.allowModification = true,
  }) : super(key: key);

  @override
  State<AIOperationsPreview> createState() => _AIOperationsPreviewState();
}

class _AIOperationsPreviewState extends State<AIOperationsPreview>
    with TickerProviderStateMixin {
  late AnimationController _listController;
  late AnimationController _fabController;
  late Animation<double> _fabAnimation;
  
  Set<String> _selectedOperations = {};
  bool _selectAll = false;
  
  @override
  void initState() {
    super.initState();
    
    _listController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _fabAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fabController, curve: Curves.easeInOut),
    );
    
    _listController.forward();
    
    // Show FAB when there are approved operations
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _updateFabVisibility();
    });
  }

  @override
  void didUpdateWidget(AIOperationsPreview oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.operations != widget.operations) {
      _updateFabVisibility();
    }
  }

  @override
  void dispose() {
    _listController.dispose();
    _fabController.dispose();
    super.dispose();
  }

  void _updateFabVisibility() {
    final hasApprovedOperations = widget.operations.any((op) => op.isApproved);
    if (hasApprovedOperations) {
      _fabController.forward();
    } else {
      _fabController.reverse();
    }
  }

  void _toggleSelectAll() {
    setState(() {
      _selectAll = !_selectAll;
      if (_selectAll) {
        _selectedOperations = widget.operations.map((op) => op.id).toSet();
      } else {
        _selectedOperations.clear();
      }
    });
  }

  void _approveSelected() {
    final updatedOperations = widget.operations.map((op) {
      if (_selectedOperations.contains(op.id)) {
        return op.copyWith(isApproved: true, isRejected: false);
      }
      return op;
    }).toList();
    
    widget.onOperationsModified?.call(updatedOperations);
    setState(() {
      _selectedOperations.clear();
      _selectAll = false;
    });
    _updateFabVisibility();
  }

  void _rejectSelected() {
    final updatedOperations = widget.operations.map((op) {
      if (_selectedOperations.contains(op.id)) {
        return op.copyWith(isApproved: false, isRejected: true);
      }
      return op;
    }).toList();
    
    widget.onOperationsModified?.call(updatedOperations);
    setState(() {
      _selectedOperations.clear();
      _selectAll = false;
    });
    _updateFabVisibility();
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<FileOrganizerProvider, AccessibilityProvider>(
      builder: (context, provider, accessibilityProvider, child) {
        return ScreenReaderAnnouncer(
          announcement: _getOperationsAnnouncement(),
          child: Semantics(
            label: 'AI Operations Preview',
            hint: 'Review and approve file organization operations generated by AI',
            child: Card(
              elevation: 8,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Column(
                children: [
                  _buildHeader(),
                  if (widget.operations.isEmpty)
                    _buildEmptyState()
                  else ...[
                    if (widget.showBatchControls) _buildBatchControls(),
                    Expanded(child: _buildOperationsList()),
                    _buildSummaryBar(),
                  ],
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer.withOpacity(0.3),
        borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              Icons.auto_awesome,
              color: Theme.of(context).colorScheme.onPrimary,
              size: 20,
            ),
          ),
          const SizedBox(width: 12),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'AI Operation Preview',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              if (widget.operations.isNotEmpty)
                Text(
                  '${widget.operations.length} operations planned',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
                  ),
                ),
            ],
          ),
          const Spacer(),
          if (widget.operations.isNotEmpty) _buildConfidenceIndicator(),
        ],
      ),
    );
  }

  Widget _buildConfidenceIndicator() {
    final avgConfidence = widget.operations.fold<double>(
      0.0,
      (sum, op) => sum + op.confidence,
    ) / widget.operations.length;

    Color confidenceColor;
    String confidenceText;
    
    if (avgConfidence >= 0.8) {
      confidenceColor = Colors.green;
      confidenceText = 'High';
    } else if (avgConfidence >= 0.6) {
      confidenceColor = Colors.orange;
      confidenceText = 'Medium';
    } else {
      confidenceColor = Colors.red;
      confidenceText = 'Low';
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: confidenceColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: confidenceColor.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.psychology,
            size: 16,
            color: confidenceColor,
          ),
          const SizedBox(width: 4),
          Text(
            '$confidenceText Confidence',
            style: TextStyle(
              color: confidenceColor,
              fontSize: 12,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBatchControls() {
    if (!widget.allowModification) return const SizedBox.shrink();
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
        border: Border(
          bottom: BorderSide(
            color: Theme.of(context).colorScheme.outline.withOpacity(0.2),
          ),
        ),
      ),
      child: Row(
        children: [
          Checkbox(
            value: _selectAll,
            onChanged: (_) => _toggleSelectAll(),
          ),
          Text(
            'Select All (${_selectedOperations.length}/${widget.operations.length})',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.w500,
            ),
          ),
          const Spacer(),
          if (_selectedOperations.isNotEmpty) ...[
            OutlinedButton.icon(
              onPressed: _rejectSelected,
              icon: const Icon(Icons.close, size: 16),
              label: const Text('Reject'),
              style: OutlinedButton.styleFrom(
                foregroundColor: Theme.of(context).colorScheme.error,
                side: BorderSide(color: Theme.of(context).colorScheme.error),
              ),
            ),
            const SizedBox(width: 8),
            ElevatedButton.icon(
              onPressed: _approveSelected,
              icon: const Icon(Icons.check, size: 16),
              label: const Text('Approve'),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      height: 300,
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.auto_awesome_outlined,
              size: 64,
              color: Theme.of(context).colorScheme.outline,
            ),
            const SizedBox(height: 16),
            Text(
              'No operations planned',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Theme.of(context).colorScheme.outline,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Analyze your files to see AI suggestions',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Theme.of(context).colorScheme.outline,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOperationsList() {
    return AnimatedBuilder(
      animation: _listController,
      builder: (context, child) {
        return ListView.builder(
          padding: const EdgeInsets.all(8),
          itemCount: widget.operations.length,
          itemBuilder: (context, index) {
            final operation = widget.operations[index];
            final slideValue = Interval(
              index * 0.1,
              (index * 0.1) + 0.3,
              curve: Curves.easeOutCubic,
            ).transform(_listController.value);
            
            return SlideTransition(
              position: Tween<Offset>(
                begin: const Offset(1.0, 0.0),
                end: Offset.zero,
              ).animate(CurvedAnimation(
                parent: _listController,
                curve: Interval(
                  index * 0.1,
                  (index * 0.1) + 0.3,
                  curve: Curves.easeOutCubic,
                ),
              )),
              child: FadeTransition(
                opacity: Tween<double>(begin: 0.0, end: 1.0).animate(
                  CurvedAnimation(
                    parent: _listController,
                    curve: Interval(
                      index * 0.1,
                      (index * 0.1) + 0.3,
                      curve: Curves.easeOut,
                    ),
                  ),
                ),
                child: _buildOperationCard(operation, index),
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildOperationCard(FileOperation operation, int index) {
    final isSelected = _selectedOperations.contains(operation.id);
    final operationDescription = _getOperationDescription(operation);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: Semantics(
        label: operationDescription,
        hint: operation.isApproved 
            ? 'Operation approved for execution'
            : operation.isRejected
                ? 'Operation rejected'
                : 'Tap to approve or reject this operation',
        selected: isSelected,
        child: Card(
          elevation: operation.isApproved ? 4 : 2,
          color: operation.isApproved
              ? Theme.of(context).colorScheme.primaryContainer.withOpacity(0.3)
              : operation.isRejected
                  ? Theme.of(context).colorScheme.errorContainer.withOpacity(0.3)
                  : null,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: isSelected
                ? BorderSide(color: Theme.of(context).colorScheme.primary, width: 2)
                : operation.isApproved
                    ? BorderSide(color: Theme.of(context).colorScheme.primary, width: 1)
                    : operation.isRejected
                        ? BorderSide(color: Theme.of(context).colorScheme.error, width: 1)
                        : BorderSide.none,
          ),
          child: Theme(
            data: Theme.of(context).copyWith(dividerColor: Colors.transparent),
            child: ExpansionTile(
              leading: widget.showBatchControls && widget.allowModification
                  ? Semantics(
                      label: 'Select operation for batch processing',
                      child: Checkbox(
                        value: isSelected,
                        onChanged: (value) {
                          setState(() {
                            if (value == true) {
                              _selectedOperations.add(operation.id);
                            } else {
                              _selectedOperations.remove(operation.id);
                            }
                            _selectAll = _selectedOperations.length == widget.operations.length;
                          });
                        },
                      ),
                    )
                  : _buildOperationIcon(operation),
              title: _buildOperationTitle(operation),
              subtitle: _buildOperationSubtitle(operation),
              trailing: widget.allowModification ? _buildOperationActions(operation) : null,
              children: [
                _buildOperationDetails(operation),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildOperationIcon(FileOperation operation) {
    IconData icon;
    Color color;
    
    switch (operation.type) {
      case FileOperationType.move:
        icon = Icons.drive_file_move;
        color = Colors.blue;
        break;
      case FileOperationType.copy:
        icon = Icons.copy;
        color = Colors.green;
        break;
      case FileOperationType.delete:
        icon = Icons.delete;
        color = Colors.red;
        break;
      case FileOperationType.rename:
        icon = Icons.drive_file_rename_outline;
        color = Colors.orange;
        break;
      case FileOperationType.createFolder:
        icon = Icons.create_new_folder;
        color = Colors.purple;
        break;
    }
    
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Icon(icon, color: color, size: 20),
    );
  }

  Widget _buildOperationTitle(FileOperation operation) {
    String title;
    switch (operation.type) {
      case FileOperationType.move:
        title = 'Move';
        break;
      case FileOperationType.copy:
        title = 'Copy';
        break;
      case FileOperationType.delete:
        title = 'Delete';
        break;
      case FileOperationType.rename:
        title = 'Rename';
        break;
      case FileOperationType.createFolder:
        title = 'Create Folder';
        break;
    }
    
    return Row(
      children: [
        Expanded(
          child: Text(
            '$title: ${_getFileName(operation.sourcePath)}',
            style: const TextStyle(fontWeight: FontWeight.w600),
          ),
        ),
        _buildConfidenceBadge(operation.confidence),
      ],
    );
  }

  Widget _buildOperationSubtitle(FileOperation operation) {
    String subtitle;
    switch (operation.type) {
      case FileOperationType.move:
      case FileOperationType.copy:
        subtitle = 'To: ${operation.destinationPath ?? 'Unknown'}';
        break;
      case FileOperationType.delete:
        subtitle = 'This file will be permanently deleted';
        break;
      case FileOperationType.rename:
        subtitle = 'New name: ${operation.destinationPath ?? 'Unknown'}';
        break;
      case FileOperationType.createFolder:
        subtitle = 'At: ${operation.destinationPath ?? 'Unknown'}';
        break;
    }
    
    return Text(
      subtitle,
      style: TextStyle(
        color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
      ),
    );
  }

  Widget _buildConfidenceBadge(double confidence) {
    Color color;
    String text;
    
    if (confidence >= 0.8) {
      color = Colors.green;
      text = '${(confidence * 100).round()}%';
    } else if (confidence >= 0.6) {
      color = Colors.orange;
      text = '${(confidence * 100).round()}%';
    } else {
      color = Colors.red;
      text = '${(confidence * 100).round()}%';
    }
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 11,
          fontWeight: FontWeight.w600,
        ),
      ),
    );
  }

  Widget _buildOperationActions(FileOperation operation) {
    if (operation.isApproved) {
      return AccessibleIconButton(
        onPressed: () => _toggleOperationApproval(operation, false),
        icon: Icons.check_circle,
        semanticLabel: 'Undo approval',
        semanticHint: 'Remove approval from this operation',
        tooltip: 'Approved - Click to undo',
      );
    } else if (operation.isRejected) {
      return AccessibleIconButton(
        onPressed: () => _toggleOperationRejection(operation, false),
        icon: Icons.cancel,
        semanticLabel: 'Undo rejection',
        semanticHint: 'Remove rejection from this operation',
        isDestructive: true,
        tooltip: 'Rejected - Click to undo',
      );
    }
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        AccessibleIconButton(
          onPressed: () => _toggleOperationRejection(operation, true),
          icon: Icons.close,
          semanticLabel: 'Reject operation',
          semanticHint: 'Mark this operation as rejected',
          isDestructive: true,
          tooltip: 'Reject',
        ),
        AccessibleIconButton(
          onPressed: () => _toggleOperationApproval(operation, true),
          icon: Icons.check,
          semanticLabel: 'Approve operation',
          semanticHint: 'Mark this operation for execution',
          tooltip: 'Approve',
        ),
      ],
    );
  }

  Widget _buildOperationDetails(FileOperation operation) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (operation.reasoning.isNotEmpty) ...[
            Semantics(
              label: 'AI Reasoning section',
              child: Row(
                children: [
                  Icon(
                    Icons.psychology,
                    size: 16,
                    color: Theme.of(context).colorScheme.primary,
                    semanticLabel: 'AI reasoning icon',
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'AI Reasoning',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            Semantics(
              label: 'AI reasoning explanation',
              child: Text(
                operation.reasoning,
                style: Theme.of(context).textTheme.bodySmall,
                semanticsLabel: 'AI reasoning: ${operation.reasoning}',
              ),
            ),
            const SizedBox(height: 12),
          ],
          if (operation.tags.isNotEmpty) ...[
            Row(
              children: [
                Icon(
                  Icons.label,
                  size: 16,
                  color: Theme.of(context).colorScheme.secondary,
                ),
                const SizedBox(width: 8),
                Text(
                  'Tags',
                  style: Theme.of(context).textTheme.titleSmall?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              children: operation.tags.map((tag) => Chip(
                label: Text(tag),
                backgroundColor: Theme.of(context).colorScheme.primaryContainer.withOpacity(0.5),
                labelStyle: TextStyle(
                  color: Theme.of(context).colorScheme.onPrimaryContainer,
                  fontSize: 12,
                ),
              )).toList(),
            ),
            const SizedBox(height: 12),
          ],
          _buildEstimatedImpact(operation),
        ],
      ),
    );
  }

  Widget _buildEstimatedImpact(FileOperation operation) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Estimated Impact',
            style: Theme.of(context).textTheme.titleSmall?.copyWith(
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _buildImpactItem('Time', '${operation.estimatedTime.inSeconds}s'),
              _buildImpactItem('Size', _formatBytes(operation.estimatedSize)),
                              _buildImpactItem('Risk', operation.type == FileOperationType.delete ? 'High' : 'Low'),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildImpactItem(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: Theme.of(context).colorScheme.outline,
          ),
        ),
      ],
    );
  }

  Widget _buildSummaryBar() {
    final approvedCount = widget.operations.where((op) => op.isApproved).length;
    final rejectedCount = widget.operations.where((op) => op.isRejected).length;
    final pendingCount = widget.operations.length - approvedCount - rejectedCount;
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
        borderRadius: const BorderRadius.vertical(bottom: Radius.circular(16)),
      ),
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: Row(
              children: [
                Flexible(child: _buildSummaryItem('Approved', approvedCount, Colors.green)),
                const SizedBox(width: 8),
                Flexible(child: _buildSummaryItem('Pending', pendingCount, Colors.orange)),
                const SizedBox(width: 8),
                Flexible(child: _buildSummaryItem('Rejected', rejectedCount, Colors.red)),
              ],
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            flex: 1,
            child: ScaleTransition(
              scale: _fabAnimation,
              child: ElevatedButton.icon(
                onPressed: approvedCount > 0 ? widget.onExecute : null,
                icon: const Icon(Icons.play_arrow),
                label: const Text(
                  'Execute',
                  overflow: TextOverflow.ellipsis,
                ),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryItem(String label, int count, Color color) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 8,
          height: 8,
          decoration: BoxDecoration(
            color: color,
            shape: BoxShape.circle,
          ),
        ),
        const SizedBox(width: 4),
        Flexible(
          child: Text(
            '$count',
            style: TextStyle(
              fontWeight: FontWeight.w600,
              color: color,
            ),
            overflow: TextOverflow.ellipsis,
          ),
        ),
      ],
    );
  }

  void _toggleOperationApproval(FileOperation operation, bool approve) {
    final updatedOperations = widget.operations.map((op) {
      if (op.id == operation.id) {
        return op.copyWith(
          isApproved: approve,
          isRejected: approve ? false : op.isRejected,
        );
      }
      return op;
    }).toList();
    
    widget.onOperationsModified?.call(updatedOperations);
    _updateFabVisibility();
  }

  void _toggleOperationRejection(FileOperation operation, bool reject) {
    final updatedOperations = widget.operations.map((op) {
      if (op.id == operation.id) {
        return op.copyWith(
          isRejected: reject,
          isApproved: reject ? false : op.isApproved,
        );
      }
      return op;
    }).toList();
    
    widget.onOperationsModified?.call(updatedOperations);
    _updateFabVisibility();
  }

  String _getFileName(String path) {
    return path.split('/').last.split('\\').last;
  }

  String _formatBytes(int bytes) {
    if (bytes == 0) return '0 B';
    const suffixes = ['B', 'KB', 'MB', 'GB'];
    int i = 0;
    double size = bytes.toDouble();
    
    while (size >= 1024 && i < suffixes.length - 1) {
      size /= 1024;
      i++;
    }
    
    return '${size.toStringAsFixed(size < 10 ? 1 : 0)} ${suffixes[i]}';
  }

  String _getOperationsAnnouncement() {
    if (widget.operations.isEmpty) {
      return 'No operations to preview';
    }
    
    final approved = widget.operations.where((op) => op.isApproved).length;
    final total = widget.operations.length;
    return 'AI Operations Preview: $approved of $total operations approved for execution';
  }

  String _getOperationDescription(FileOperation operation) {
    final typeDescription = {
      'move': 'Move file',
      'copy': 'Copy file', 
      'delete': 'Delete file',
      'mkdir': 'Create directory',
      'extract': 'Extract archive',
      'get_info': 'Get file information',
      'check_access': 'Check file access'
    }[operation.type] ?? 'Process file';

    final fileName = operation.sourcePath.split('/').last;
    String description = '$typeDescription $fileName';
    
    if (operation.destinationPath != null && operation.destinationPath!.isNotEmpty) {
      final destFolder = operation.destinationPath!.split('/').last;
      description += ' to $destFolder';
    }
    
    if (operation.reasoning.isNotEmpty) {
      description += '. AI reasoning: ${operation.reasoning}';
    }
    
    if (operation.confidence != null) {
      final confidence = (operation.confidence! * 100).round();
      description += '. Confidence: $confidence percent';
    }
    
    return description;
  }
}
